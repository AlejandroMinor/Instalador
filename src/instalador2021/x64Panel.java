/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package instalador2021;

import java.awt.Cursor;
import static java.awt.Cursor.DEFAULT_CURSOR;
import static java.awt.Frame.HAND_CURSOR;
import java.awt.Menu;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Alejandro
 */
public class x64Panel extends javax.swing.JInternalFrame {
//principal aux = new principal();//objeto para pasar metodos

    cambioColor aux = new cambioColor();

    /**
     * Creates new form x64Panel
     */
    public x64Panel() {
        initComponents();

        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chromex64Ico = new javax.swing.JLabel();
        chromex64CheckBox = new javax.swing.JCheckBox();
        VLCx64Ico = new javax.swing.JLabel();
        VLCx64CheckBox = new javax.swing.JCheckBox();
        winrarx64Ico = new javax.swing.JLabel();
        winrarx64CheckBox = new javax.swing.JCheckBox();
        codecsIco = new javax.swing.JLabel();
        codecsCheckBox = new javax.swing.JCheckBox();
        adobeIco = new javax.swing.JLabel();
        adobeCheckBox = new javax.swing.JCheckBox();
        avastIco = new javax.swing.JLabel();
        avastCheckBox = new javax.swing.JCheckBox();
        visorFotosIco = new javax.swing.JLabel();
        visorFotosCheckBox = new javax.swing.JCheckBox();
        nitrox64Ico = new javax.swing.JLabel();
        nitrox64CheckBox = new javax.swing.JCheckBox();
        fireFoxx64Ico = new javax.swing.JLabel();
        fireFoxx64CheckBox = new javax.swing.JCheckBox();
        allChecksIco = new javax.swing.JLabel();
        allChecksCheckBox = new javax.swing.JCheckBox();
        Instalarx64Botton = new javax.swing.JButton();
        detenerInstalacionx64Botton = new javax.swing.JButton();
        imgAdorno = new javax.swing.JLabel();

        setBackground(new java.awt.Color(84, 115, 232));
        setBorder(null);
        setForeground(new java.awt.Color(255, 255, 51));
        setMaximumSize(new java.awt.Dimension(600, 400));
        setMinimumSize(new java.awt.Dimension(600, 400));
        setOpaque(true);
        setPreferredSize(new java.awt.Dimension(600, 400));
        setRequestFocusEnabled(false);
        setVerifyInputWhenFocusTarget(false);
        setVisible(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chromex64Ico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/chrome-48.png"))); // NOI18N
        getContentPane().add(chromex64Ico, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 23, -1, -1));

        chromex64CheckBox.setForeground(new java.awt.Color(255, 255, 255));
        chromex64CheckBox.setSelected(true);
        chromex64CheckBox.setText("Chrome x64");
        chromex64CheckBox.setContentAreaFilled(false);
        chromex64CheckBox.setFocusPainted(false);
        chromex64CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chromex64CheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(chromex64CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 72, -1, -1));

        VLCx64Ico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/vlc-48.png"))); // NOI18N
        getContentPane().add(VLCx64Ico, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 113, -1, -1));

        VLCx64CheckBox.setForeground(new java.awt.Color(255, 255, 255));
        VLCx64CheckBox.setSelected(true);
        VLCx64CheckBox.setText("VLC Player x64");
        VLCx64CheckBox.setFocusPainted(false);
        VLCx64CheckBox.setOpaque(false);
        VLCx64CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VLCx64CheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(VLCx64CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 162, -1, -1));

        winrarx64Ico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/winrar-48.png"))); // NOI18N
        getContentPane().add(winrarx64Ico, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 203, -1, -1));

        winrarx64CheckBox.setForeground(new java.awt.Color(255, 255, 255));
        winrarx64CheckBox.setSelected(true);
        winrarx64CheckBox.setText("Winrar x64");
        winrarx64CheckBox.setFocusPainted(false);
        winrarx64CheckBox.setOpaque(false);
        winrarx64CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                winrarx64CheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(winrarx64CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 252, -1, -1));

        codecsIco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/documentary-48B.png"))); // NOI18N
        getContentPane().add(codecsIco, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 293, -1, -1));

        codecsCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        codecsCheckBox.setText("Codecs A/V");
        codecsCheckBox.setFocusPainted(false);
        codecsCheckBox.setOpaque(false);
        codecsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codecsCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(codecsCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 342, -1, -1));

        adobeIco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pdf-48.png"))); // NOI18N
        getContentPane().add(adobeIco, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 23, -1, -1));

        adobeCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        adobeCheckBox.setSelected(true);
        adobeCheckBox.setText("Adobe Reader");
        adobeCheckBox.setFocusPainted(false);
        adobeCheckBox.setOpaque(false);
        adobeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adobeCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(adobeCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 72, -1, -1));

        avastIco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/avast-48.png"))); // NOI18N
        getContentPane().add(avastIco, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 113, -1, -1));

        avastCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        avastCheckBox.setSelected(true);
        avastCheckBox.setText("Avast Antivirus");
        avastCheckBox.setFocusPainted(false);
        avastCheckBox.setOpaque(false);
        avastCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avastCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(avastCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 162, -1, -1));

        visorFotosIco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/photo-gallery-48B.png"))); // NOI18N
        getContentPane().add(visorFotosIco, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 203, -1, -1));

        visorFotosCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        visorFotosCheckBox.setText("Visor de Fotos");
        visorFotosCheckBox.setFocusPainted(false);
        visorFotosCheckBox.setOpaque(false);
        visorFotosCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visorFotosCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(visorFotosCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 252, -1, -1));

        nitrox64Ico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nitro-48B.png"))); // NOI18N
        getContentPane().add(nitrox64Ico, new org.netbeans.lib.awtextra.AbsoluteConstraints(189, 293, -1, -1));

        nitrox64CheckBox.setForeground(new java.awt.Color(255, 255, 255));
        nitrox64CheckBox.setText("Nitro PDF x64");
        nitrox64CheckBox.setFocusPainted(false);
        nitrox64CheckBox.setOpaque(false);
        nitrox64CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nitrox64CheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(nitrox64CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 342, -1, -1));

        fireFoxx64Ico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/firefox-48B.png"))); // NOI18N
        getContentPane().add(fireFoxx64Ico, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 23, -1, -1));

        fireFoxx64CheckBox.setForeground(new java.awt.Color(255, 255, 255));
        fireFoxx64CheckBox.setText("FireFox x64");
        fireFoxx64CheckBox.setFocusPainted(false);
        fireFoxx64CheckBox.setOpaque(false);
        fireFoxx64CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireFoxx64CheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(fireFoxx64CheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 72, -1, -1));

        allChecksIco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/index-48B.png"))); // NOI18N
        getContentPane().add(allChecksIco, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 113, -1, -1));

        allChecksCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        allChecksCheckBox.setText("Seleccionar todos");
        allChecksCheckBox.setFocusPainted(false);
        allChecksCheckBox.setOpaque(false);
        allChecksCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allChecksCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(allChecksCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 162, -1, -1));

        Instalarx64Botton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ok.png"))); // NOI18N
        Instalarx64Botton.setText("Instalar");
        Instalarx64Botton.setBorder(null);
        Instalarx64Botton.setPreferredSize(new java.awt.Dimension(93, 29));
        Instalarx64Botton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Instalarx64BottonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Instalarx64BottonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Instalarx64BottonMouseExited(evt);
            }
        });
        Instalarx64Botton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Instalarx64BottonActionPerformed(evt);
            }
        });
        getContentPane().add(Instalarx64Botton, new org.netbeans.lib.awtextra.AbsoluteConstraints(395, 330, 110, 30));

        detenerInstalacionx64Botton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Stop.png"))); // NOI18N
        detenerInstalacionx64Botton.setText("Detener");
        detenerInstalacionx64Botton.setBorder(null);
        detenerInstalacionx64Botton.setPreferredSize(new java.awt.Dimension(93, 29));
        detenerInstalacionx64Botton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                detenerInstalacionx64BottonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                detenerInstalacionx64BottonMouseEntered(evt);
            }
        });
        detenerInstalacionx64Botton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detenerInstalacionx64BottonActionPerformed(evt);
            }
        });
        getContentPane().add(detenerInstalacionx64Botton, new org.netbeans.lib.awtextra.AbsoluteConstraints(395, 330, 110, 30));

        imgAdorno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/PC1.png"))); // NOI18N
        getContentPane().add(imgAdorno, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, 200, 200));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chromex64CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chromex64CheckBoxActionPerformed
        if (chromex64CheckBox.isSelected()) {
            aux.RegresarColorIcono(chromex64Ico);
        } else {
            aux.cambiarColorIcono(chromex64Ico);
        }
    }//GEN-LAST:event_chromex64CheckBoxActionPerformed

    private void VLCx64CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VLCx64CheckBoxActionPerformed
        if (VLCx64CheckBox.isSelected()) {
            aux.RegresarColorIcono(VLCx64Ico);
        } else {
            aux.cambiarColorIcono(VLCx64Ico);
        }
    }//GEN-LAST:event_VLCx64CheckBoxActionPerformed

    private void winrarx64CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_winrarx64CheckBoxActionPerformed
        if (winrarx64CheckBox.isSelected()) {
            aux.RegresarColorIcono(winrarx64Ico);
        } else {
            aux.cambiarColorIcono(winrarx64Ico);
        }
    }//GEN-LAST:event_winrarx64CheckBoxActionPerformed

    private void codecsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codecsCheckBoxActionPerformed
        if (codecsCheckBox.isSelected()) {
            aux.RegresarColorIcono(codecsIco);
        } else {
            aux.cambiarColorIcono(codecsIco);
        }
    }//GEN-LAST:event_codecsCheckBoxActionPerformed

    private void adobeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adobeCheckBoxActionPerformed
        if (adobeCheckBox.isSelected()) {
            aux.RegresarColorIcono(adobeIco);
        } else {
            aux.cambiarColorIcono(adobeIco);
        }
    }//GEN-LAST:event_adobeCheckBoxActionPerformed

    private void fireFoxx64CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireFoxx64CheckBoxActionPerformed
        if (fireFoxx64CheckBox.isSelected()) {
            aux.RegresarColorIcono(fireFoxx64Ico);
        } else {
            aux.cambiarColorIcono(fireFoxx64Ico);
        }
    }//GEN-LAST:event_fireFoxx64CheckBoxActionPerformed

    private void avastCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avastCheckBoxActionPerformed
        if (avastCheckBox.isSelected()) {
            aux.RegresarColorIcono(avastIco);
        } else {
            aux.cambiarColorIcono(avastIco);
        }
    }//GEN-LAST:event_avastCheckBoxActionPerformed

    private void visorFotosCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visorFotosCheckBoxActionPerformed
        if (visorFotosCheckBox.isSelected()) {
            aux.RegresarColorIcono(visorFotosIco);
        } else {
            aux.cambiarColorIcono(visorFotosIco);
        }
    }//GEN-LAST:event_visorFotosCheckBoxActionPerformed

    private void nitrox64CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nitrox64CheckBoxActionPerformed
        if (nitrox64CheckBox.isSelected()) {
            aux.RegresarColorIcono(nitrox64Ico);
        } else {
            aux.cambiarColorIcono(nitrox64Ico);
        }
    }//GEN-LAST:event_nitrox64CheckBoxActionPerformed

    private void allChecksCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allChecksCheckBoxActionPerformed

        if (allChecksCheckBox.isSelected()) {
            allChecksCheckBox.setText("Deseleccionar todo");
            chromex64CheckBox.setSelected(true);
            VLCx64CheckBox.setSelected(true);
            winrarx64CheckBox.setSelected(true);
            codecsCheckBox.setSelected(true);
            adobeCheckBox.setSelected(true);
            avastCheckBox.setSelected(true);
            visorFotosCheckBox.setSelected(true);
            nitrox64CheckBox.setSelected(true);
            fireFoxx64CheckBox.setSelected(true);
            aux.RegresarColorIcono(allChecksIco);
            aux.RegresarColorIcono(chromex64Ico);
            aux.RegresarColorIcono(VLCx64Ico);
            aux.RegresarColorIcono(winrarx64Ico);
            aux.RegresarColorIcono(codecsIco);
            aux.RegresarColorIcono(adobeIco);
            aux.RegresarColorIcono(avastIco);
            aux.RegresarColorIcono(visorFotosIco);
            aux.RegresarColorIcono(nitrox64Ico);
            aux.RegresarColorIcono(fireFoxx64Ico);

        } else {
            allChecksCheckBox.setText("Seleccionar todo");
            chromex64CheckBox.setSelected(false);
            VLCx64CheckBox.setSelected(false);
            winrarx64CheckBox.setSelected(false);
            codecsCheckBox.setSelected(false);
            adobeCheckBox.setSelected(false);
            avastCheckBox.setSelected(false);
            visorFotosCheckBox.setSelected(false);
            nitrox64CheckBox.setSelected(false);
            fireFoxx64CheckBox.setSelected(false);
            aux.cambiarColorIcono(allChecksIco);
            aux.cambiarColorIcono(chromex64Ico);
            aux.cambiarColorIcono(VLCx64Ico);
            aux.cambiarColorIcono(winrarx64Ico);
            aux.cambiarColorIcono(codecsIco);
            aux.cambiarColorIcono(adobeIco);
            aux.cambiarColorIcono(avastIco);
            aux.cambiarColorIcono(visorFotosIco);
            aux.cambiarColorIcono(nitrox64Ico);
            aux.cambiarColorIcono(fireFoxx64Ico);

        }


    }//GEN-LAST:event_allChecksCheckBoxActionPerformed

    private void Instalarx64BottonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Instalarx64BottonMouseClicked

    }//GEN-LAST:event_Instalarx64BottonMouseClicked

    private void Instalarx64BottonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Instalarx64BottonMouseEntered
        Instalarx64Botton.setCursor(new Cursor(HAND_CURSOR));
    }//GEN-LAST:event_Instalarx64BottonMouseEntered

    private void Instalarx64BottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Instalarx64BottonActionPerformed
        activarDesactivarChecks(false);
        HiloX64 Instalacionx64 = new HiloX64();
        Instalacionx64.start();
        Instalarx64Botton.setVisible(false);
        detenerInstalacionx64Botton.setVisible(true);


    }//GEN-LAST:event_Instalarx64BottonActionPerformed

    private void detenerInstalacionx64BottonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detenerInstalacionx64BottonMouseClicked


    }//GEN-LAST:event_detenerInstalacionx64BottonMouseClicked

    private void detenerInstalacionx64BottonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detenerInstalacionx64BottonMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_detenerInstalacionx64BottonMouseEntered

    private void detenerInstalacionx64BottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detenerInstalacionx64BottonActionPerformed
        boolean confirmar = true;

        cerrarPrograma(confirmar);


    }//GEN-LAST:event_detenerInstalacionx64BottonActionPerformed

    private void Instalarx64BottonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Instalarx64BottonMouseExited
        Instalarx64Botton.setCursor(new Cursor(DEFAULT_CURSOR));
    }//GEN-LAST:event_Instalarx64BottonMouseExited

    // HiloX64 Instalacionx64 = new HiloX64(); 
    class HiloX64 extends Thread {

        @Override
        public void run() {

            Instalador Software = new Instalador();

            int tiempo = 1000;
            boolean continuar = false;

            Procesos Buscador = new Procesos();

            if (chromex64CheckBox.isSelected()) {

                do {
                    try {
                        Thread.sleep(1 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("2.-Chrome64.exe")) {
                        } else {
                            Software.instalarTiempo("cmd /C start /wait 64/2.-Chrome64.exe", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }

            if (VLCx64CheckBox.isSelected()) {

                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe")) {

                        } else {
                            Software.instalarTiempo("cmd /C start /wait 32/3.-VLC32.exe /S", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;
                        }

                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);
            }
            if (winrarx64CheckBox.isSelected()) {
                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe")) {

                        } else {
                            Software.instalarTiempo("cmd /C start /wait 64/5.-WinrarX64.exe /S", 5);
                            Thread.sleep(3 * tiempo);
                            Software.instalarTiempo("cmd /C start /wait Activadores/WinrarCrackX64.exe /S", 3);
                            continuar = false;

                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }
            if (codecsCheckBox.isSelected()) {
                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe") || Buscador.isProcessRunning("4.-Codec_Pack.exe")) {
                        } else {
                            Software.instalarTiempo("cmd /C start /wait 32/4.-Codec_Pack.exe /S", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;

                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }
            if (adobeCheckBox.isSelected()) {
                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe") || Buscador.isProcessRunning("4.-Codec_Pack.exe") || Buscador.isProcessRunning("6.-Adobe.exe")) {
                        } else {
                            Software.instalarTiempo("cmd /C start /wait 32/6.-Adobe.exe", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }

            if (avastCheckBox.isSelected()) {
                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe") || Buscador.isProcessRunning("4.-Codec_Pack.exe") || Buscador.isProcessRunning("6.-Adobe.exe") || Buscador.isProcessRunning("7.-Avast.exe")) {
                        } else {
                            Software.instalarTiempo("cmd /C start /wait 32/7.-Avast.exe", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }

            if (visorFotosCheckBox.isSelected()) {
                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe") || Buscador.isProcessRunning("4.-Codec_Pack.exe") || Buscador.isProcessRunning("6.-Adobe.exe") || Buscador.isProcessRunning("7.-Avast.exe") || Buscador.isProcessRunning("Restore_Windows_Photo_Viewer.reg")) {
                        } else {
                            Software.instalarTiempo("cmd /C start /wait Extras/Restore_Windows_Photo_Viewer.reg", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }

            if (nitrox64CheckBox.isSelected()) {
                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe") || Buscador.isProcessRunning("4.-Codec_Pack.exe") || Buscador.isProcessRunning("6.-Adobe.exe") || Buscador.isProcessRunning("7.-Avast.exe") || Buscador.isProcessRunning("Restore_Windows_Photo_Viewer.reg") || Buscador.isProcessRunning("9.-Nitrox64.exe")) {
                        } else {
                            Software.instalarTiempo("cmd /C start /wait 64/9.-Nitrox64.exe", 20);
                            Software.instalarTiempo("cmd /C start /wait Extras/Nitro.txt", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }
            if (fireFoxx64CheckBox.isSelected()) {
                do {

                    try {
                        Thread.sleep(3 * tiempo);
                        continuar = true;
                        if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe") || Buscador.isProcessRunning("4.-Codec_Pack.exe") || Buscador.isProcessRunning("6.-Adobe.exe") || Buscador.isProcessRunning("7.-Avast.exe") || Buscador.isProcessRunning("Restore_Windows_Photo_Viewer.reg") || Buscador.isProcessRunning("9.-Nitrox64.exe") || Buscador.isProcessRunning("8.-FireFoxX64.exe")) {
                        } else {
                            Software.instalarTiempo("cmd /C start /wait 64/8.-FireFoxX64.exe", 1);
                            Thread.sleep(3 * tiempo);
                            continuar = false;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (continuar);

            }

            do {

                try {
                    Thread.sleep(3 * tiempo);
                    continuar = true;
                    if (Buscador.isProcessRunning("5.-WinrarX64.exe") || Buscador.isProcessRunning("3.-VLC32.exe") || Buscador.isProcessRunning("2.-Chrome64.exe") || Buscador.isProcessRunning("4.-Codec_Pack.exe") || Buscador.isProcessRunning("6.-Adobe.exe") || Buscador.isProcessRunning("7.-Avast.exe") || Buscador.isProcessRunning("Restore_Windows_Photo_Viewer.reg") || Buscador.isProcessRunning("9.-Nitrox64.exe") || Buscador.isProcessRunning("8.-FireFoxX64.exe")) {
                    } else {

                        JOptionPane.showMessageDialog(null, new JLabel("INSTALACIÓN TERMINADA", JLabel.CENTER), null, JOptionPane.PLAIN_MESSAGE);
                        activarDesactivarChecks(true);
                        continuar = false;

                    }
                } catch (Exception ex) {
                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
                }
            } while (continuar);
            detenerInstalacionx64Botton.setVisible(false);
            Instalarx64Botton.setVisible(true);

        }

    }

    public void activarDesactivarChecks(boolean respuesta) {
        chromex64CheckBox.setEnabled(respuesta);
        VLCx64CheckBox.setEnabled(respuesta);
        winrarx64CheckBox.setEnabled(respuesta);
        codecsCheckBox.setEnabled(respuesta);
        adobeCheckBox.setEnabled(respuesta);
        avastCheckBox.setEnabled(respuesta);
        visorFotosCheckBox.setEnabled(respuesta);
        nitrox64CheckBox.setEnabled(respuesta);
        fireFoxx64CheckBox.setEnabled(respuesta);
        allChecksCheckBox.setEnabled(respuesta);

    }

    public boolean cerrarPrograma(boolean resultado) {
        int result = JOptionPane.showConfirmDialog(null, "Esta acción cerrara el programa ¿Desea continuar? ", "",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            System.exit(0);
            resultado = true;
        } else {
            resultado = false;
        }
        return resultado;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Instalarx64Botton;
    private javax.swing.JCheckBox VLCx64CheckBox;
    private javax.swing.JLabel VLCx64Ico;
    private javax.swing.JCheckBox adobeCheckBox;
    private javax.swing.JLabel adobeIco;
    private javax.swing.JCheckBox allChecksCheckBox;
    private javax.swing.JLabel allChecksIco;
    private javax.swing.JCheckBox avastCheckBox;
    private javax.swing.JLabel avastIco;
    private javax.swing.JCheckBox chromex64CheckBox;
    private javax.swing.JLabel chromex64Ico;
    private javax.swing.JCheckBox codecsCheckBox;
    private javax.swing.JLabel codecsIco;
    private javax.swing.JButton detenerInstalacionx64Botton;
    private javax.swing.JCheckBox fireFoxx64CheckBox;
    private javax.swing.JLabel fireFoxx64Ico;
    private javax.swing.JLabel imgAdorno;
    private javax.swing.JCheckBox nitrox64CheckBox;
    private javax.swing.JLabel nitrox64Ico;
    private javax.swing.JCheckBox visorFotosCheckBox;
    private javax.swing.JLabel visorFotosIco;
    private javax.swing.JCheckBox winrarx64CheckBox;
    private javax.swing.JLabel winrarx64Ico;
    // End of variables declaration//GEN-END:variables
}
